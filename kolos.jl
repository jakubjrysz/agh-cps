using LinearAlgebra
using CairoMakie

function rozwiazanie1(;
    fp::Float64 = 371.56,
    t1::Float64 = 3.58,
    N::Int = 374,
)
    function g(t)
        ifelse(mod(t,1) < 0.5, 1, -1)
    end
    t = range(start = t1, step = 1/fp, length = N)
    y = 3.6 .* g.(1.1 .*t .- 3.5)
    return sum(y)/length(y)
end

function rozwiazanie2(;
    b::Vector{Float64} = [0.002779176257811051, -0.006095411177011039, 0.005823228367814995, 1.5427527354567045e-18, -0.005823228367814995, 0.006095411177011036, -0.0027791762578110502],
    a::Vector{Float64} = [1.0, -3.31224085035553, 6.463943944423244, -7.548662737956758, 6.057000694290197, -2.908174535992974, 0.8227410523946155],
    x::Vector{Float64} = [-0.81, -0.3, 0.11, 0.4, 0.42, 0.7, -0.96, -0.47, -0.45, 0.26, -1.0, 0.7, 0.3, -0.99, 0.66, 0.86, 0.48, 0.66, 0.4, -0.41, -0.32, 0.36, -0.08, 0.13, -0.92],
    L::Int = 54,
)
    N = length(x)
    M = length(b)
    K = length(a)
    y = zeros(N)
    for n in 1:N
        for m in 1:M
            if(n - m + 1 > 0)
                y[n] += b[m]*x[n- m + 1]
            end
        end
        for k in 2:K
            if(n - k + 1 > 0)
                y[n] -= a[k]*y[n - k + 1]
            end
        end
    end
    return sum(y)/length(y)
end

function rozwiazanie3(;
    b::Vector{Float64} = [0.20589786767603166, -1.0861272640549327, 3.6226396155444696, -8.22906790017682, 14.482720679302624, -19.905487411076226, 22.227044074733804, -19.905487411076216, 14.482720679302618, -8.229067900176823, 3.622639615544471, -1.0861272640549329, 0.20589786767603174],
    a::Vector{Float64} = [1.0, -4.1018701585332575, 10.455001599833523, -18.605035749010852, 26.070359755268754, -29.249185399188946, 27.385569042192053, -21.411122854097236, 14.268286978394032, -7.919156210490829, 3.6616776168783667, -1.264252062931731, 0.2863185566670542],
    F::Vector{Float64} = [0.07, 0.09, 0.15, 0.2, 0.32],
)
    a_len = length(a)
    b_len = length(b)
    f_len = length(F)

    liczniki = zeros(ComplexF64, f_len)
    mianowniki = zeros(ComplexF64, f_len)

    for i in eachindex(F)
        z = exp(im * 2 * π * F[i])
        for k in 1:b_len
            liczniki[i] += b[k] * z^(- k + 1) 
        end
        for k in 1:a_len
            mianowniki[i] += a[k] * z^(- k + 1)
        end
    end
    gains = abs.([liczniki[i]/mianowniki[i] for i in eachindex(liczniki)])
    avg_gains = sum(gains)/length(gains)
    return avg_gains

end

function rozwiazanie4(;
    fp::Int=1620, #fn = 810
    x::Vector{ComplexF64}=ComplexF64[0.36-0.96im, -0.12-0.24im, -0.71-0.15im, -0.41+0.04im, 0.41-0.01im, -0.42+0.46im, -1.07+0.16im, -0.2-0.5im, 0.91+1.18im, -0.04-0.11im, -0.95-0.29im, 0.06-0.89im, -0.56+0.46im, 0.68+0.04im, -0.67-1.77im, 0.33-0.24im, 1.08+0.44im, -1.14+0.16im, 0.17-0.18im, -0.15-0.3im, 0.85+0.3im, 1.04+1.48im, -0.37-0.03im, 0.3-0.79im, 0.21-0.37im, -0.29-1.15im, -0.44-0.6im, 0.67+0.53im, 1.17+0.93im, -0.09+0.82im, -0.7+0.27im, -1.03+0.99im, 1.1+0.58im, -0.36-0.49im, -1.18+0.14im, -0.03-0.33im, 1.1-0.51im, -0.23+0.36im, -0.49+0.01im, 0.32+0.77im, 0.22+0.58im, 0.25-0.72im, -0.3+0.04im, 0.85+1.03im, 0.43+0.92im],
    f::Vector{Int}=[-36, 252, 360, 396],
)
    N = length(x)
    delta_f = fp / N # równa sie 36
    X = 1/N .* [sum(x[n] * exp(-im * 2 * π * (k - 1) * (n - 1) / N) for n in 1:N) for k in 1:N]        #pierwsza próbka odpowiada f = 0, później 36, 42 itp aż do 420, później -420 aż do -22
    suma_amp = abs(X[8]) + abs(X[11]) + abs(X[12]) + abs(X[45])
    return suma_amp
end
#8 = 252, 11 = 360, 12 = 396 , 23 = 792, 24 = -792, 45 = -36
#działa!!! trzeba normalizowac


function rozwiazanie5(;
    order::Int = 44,
    fp::Float64 = 190.0,
    f0::Float64 = 17.1,
    z::Vector{Int} = [20, 12, 6],
)
    kronecker(n) = ifelse(n == 0, 1, 0)
    fn = f0/fp
    M = div(order,2)
    h = [2*fn*sinc(2*fn*n) for n in -M:M]
    w = [0.54 + 0.46*cos(2*pi*n / (2*M + 1)) for n in -M:M]
    hw = h .* w
    suma = sum(hw[i] for i in z)
    return suma
end
# działa


function rozwiazanie6(;
    b::Vector{Float64} = [0.5714654181096676, -3.6548462159113435, 12.184770642960807, -26.492571511694212, 41.23527906042584, -47.585143698196894, 41.23527906042584, -26.49257151169421, 12.184770642960808, -3.6548462159113444, 0.5714654181096677],
    a::Vector{Float64} = [1.0, -5.734799907386861, 17.084159616729256, -33.13781114381352, 45.88765427844421, -46.9223637139893, 35.80658729852799, -20.07466514801493, 7.947460511819786, -2.010339240203334, 0.25716853747132096],
    x::Vector{Float64} = [-0.91, 0.43, 0.35, 0.3, -0.09, 0.12, -0.25, 0.79, -0.95, 0.29, 0.74, -0.54, 0.27, -0.94, -0.46, 0.81, 0.53, -0.24, -0.19, 0.04, 0.25, 0.13, -0.58, -0.15, -0.32, -0.27],
    L::Int = 54,
)
    b_len = length(b)
    a_len = length(a)
    N = length(x)
    x_padded = vcat(x, zeros(Float64, L - N))
    y = zeros(L)
    for n in 1:L
        for m in 0:b_len - 1
            if n - m > 0
                y[n] += b[m + 1] * x_padded[n - m]
            end
        end
        for k in 1:a_len - 1
            if n - k > 0
                y[n] -= a[k + 1] * y[n - k]
            end
        end
    end
    return sum(y.^2)/L
end
# działa

function rozwiazanie7(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[1.6631456433997187 - 3.637849167961824im, 0.2512987283895615 + 0.5496733696232977im, 0.1907602022185668 - 0.0im],
    k::Float64 = 0.27802603319090385,
)
    mian = abs.(p)

    if all(mian .< 1)
        wynik = 1.0
    else
        wynik = -1.0
    end

    return wynik
end
# działa

function rozwiazanie8(;
    fp::Float64 = 408.76,
    t1::Float64 = 8.33,
    N::Int = 317,
)
    g(t) = 2 * ((t + 0.5) % 1) - 1
    t = range(start = 0, step = 1/fp, length = N)
    scatter(t, g.(t))
    y = 2.5 .* g.(3.2 .* t .- 1.9)
    return sum(y)/length(y)
end
# nie działa

function rozwiazanie9(;
    a::Float64 = -1.2,
    b::Float64 = 5.1,
    x::Vector{Float64} = [2.0, 2.40379, 2.80757, 3.21136, 3.61514, 4.01893, 4.42271, 4.8265, -1.16972, -0.76593, -0.36215, 0.04164, 0.44543, 0.84921, 1.253, 1.65678, 2.06057, 2.46435, 2.86814, 3.27192, 3.67571, 4.0795, 4.48328, 4.88707, -1.10915, -0.70536, -0.30158, 0.10221, 0.50599, 0.90978, 1.31356, 1.71735, 2.12114, 2.52492, 2.92871, 3.33249, 3.73628, 4.14006, 4.54385, 4.94763, -1.04858, -0.64479, -0.24101, 0.16278, 0.56656, 0.97035, 1.37413, 1.77792, 2.1817, 2.58549, 2.98927, 3.39306, 3.79685, 4.20063, 4.60442, 5.0082, -0.98801, -0.58423, -0.18044, 0.22334, 0.62713, 1.03091, 1.4347, 1.83849, 2.24227, 2.64606, 3.04984, 3.45363, 3.85741, 4.2612, 4.66498, 5.06877, -0.92744, -0.52366, -0.11987, 0.28391, 0.6877, 1.09148, 1.49527, 1.89905, 2.30284, 2.70662, 3.11041, 3.5142, 3.91798, 4.32177, 4.72555],
)
    N = 9
    L = range(start = a, stop = b, length = 2^N)
    
    function quantize(x,L)
        y = L[argmin(abs.(x .- L))]
        return y
    end
    
    x_q = [quantize(xi,L) for xi in x]
    error = x .- x_q
    energy = sum(error.^2)
    power = energy/length(error)
    rms = sqrt(power)
    return rms
end
# działa

function rozwiazanie10(;
    m::Vector{Float64} = [-2.4, -2.3979, -2.3958, -2.3937, -2.3916, -2.3895, -2.3874, -2.3853, -2.3832, -2.3811, -2.379, -2.3769, -2.3748, -2.3727, -2.3706, -2.3685, -2.3664, -2.3643, -2.3622, -2.3601, -2.358, -2.3559, -2.3538, -2.3517, -2.3496, -2.3475, -2.3454, -2.3433, -2.3412, -2.3391, -2.337, -2.3349, -2.3328, -2.3307, -2.3286, -2.3265, -2.3244, -2.3223, -2.3202, -2.3181, -2.316, -2.3139, -2.3118, -2.3097, -2.3076, -2.3055, -2.3034, -2.3013, -2.2992, -2.2971, -2.295, -2.2929, -2.2908, -2.2887, -2.2866, -2.2845, -2.2824, -2.2803, -2.2782, -2.2761, -2.274, -2.2719, -2.2698, -2.2677, -2.2656, -2.2635, -2.2614, -2.2593, -2.2572, -2.2551, -2.253, -2.2509],
    s::Vector{Float64} = [0.7452, 0.7087, 0.0138, 0.8951, 0.4073, 0.4276, 0.0448, 0.5468, 0.3452, 0.1164, 0.3736, 0.2974, 0.2617, 0.4393, 0.4261, 0.5137, 0.9904, 0.1674, 0.1667, 0.4039, 0.8123, 0.0702, 0.1954, 0.9833, 0.158, 0.7952, 0.8701, 0.3193, 0.7808, 0.689, 0.2071, 0.2962, 0.7494, 0.63, 0.8938, 0.8828, 0.393, 0.4709, 0.606, 0.5863, 0.5103, 0.7919, 0.2988, 0.4287, 0.386, 0.0663, 0.1574, 0.8301, 0.311, 0.6848, 0.1811, 0.5569, 0.281, 0.9884, 0.8383, 0.1676, 0.6669, 0.6685, 0.6016, 0.7637, 0.6428, 0.5916, 0.1587, 0.8124, 0.1038, 0.7768, 0.432, 0.5818, 0.8524, 0.3411, 0.9134, 0.9618],
    t::Vector{Float64} = [-2.31558, -2.38068, -2.34225, -2.27631, -2.2551, -2.39433, -2.32818, -2.37291, -2.27442, -2.27883],
)
    delta_t = m[2] - m[1]
    x = [sum(s[k] * sinc((ti - m[k])/delta_t) for k in eachindex(m)) for ti in t]
    return sum(x)
end
# działa

function rozwiazanie11(;
    x::Vector{Float64} = [2.89, -2.01, 1.42, 3.24, 3.05, -2.63, 2.88, 0.35, 0.99, -0.87, -0.83, 4.14, -3.45, -1.57, -3.58, -2.37, -2.19, -4.31, -4.64, 4.88, 0.12, -1.53, -2.76, 2.91, 0.57, 1.38, -0.85, -4.75, 1.01, -1.97, 4.85, -1.33, 0.32, 3.04, -4.91, -2.57, -3.8, 2.79, -2.76, 4.35, 0.11, 3.7, -4.47, -4.17, -2.34, -2.89, -2.3, 1.14, 4.63, -2.67, 3.24, 2.48, -0.36, 2.75, 1.1, -1.86, -0.02, -4.55, 4.84, 3.46, 2.96, 3.02],
    h::Vector{Float64} = [-3.22, 2.85, 4.8, -1.03, -3.56, 1.72, 0.52, -1.6, 1.97, 3.73, -1.43, 2.86, 0.51, -2.56, -1.39],
)
    n = length(x)
    m = length(h)
    y = zeros(n + m - 1)

    for i in 1:n
        for j in 1:m
            y[i + j - 1] += x[i] * h[j] 
        end
    end
    en = sum(y.^2)
    return en
end
# działa

function rozwiazanie12(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.415879470880599 - 0.8235448265333332im, 0.415879470880599 + 0.8235448265333332im, 0.049248857019034135 - 0.686870715924473im, 0.049248857019034135 + 0.686870715924473im, -0.35831713448925134 + 0.0im],
    k::Float64 = 0.0846119006068186,
)
    p_abs = abs.(p)
    s = 0.0
    if all(p_abs .< 1)
        return 1.0
    else
        return -1.0
    end
end
#działa

function rozwiazanie13(;
    b::Vector{Float64} = [0.0042036847822194195, 0.0210184239110971, 0.0420368478221942, 0.0420368478221942, 0.0210184239110971, 0.0042036847822194195],
    a::Vector{Float64} = [1.0, -2.706368477287315, 3.842079062472673, -3.203777928793533, 1.5618466716574666, -0.35926141501827],
    F::Vector{Float64} = [0.09, 0.19, 0.41, 0.44, 0.49],
)
    b_len = length(b)
    a_len = length(a)
    f_len = length(F)
    liczniki = zeros(ComplexF64, f_len)
    mianowniki = zeros(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(- im * 2 * π * F[i])
        for j in 1:b_len
            liczniki[i] += b[j] * z^(j - 1)
        end
        for j in 1:a_len
            mianowniki[i] += a[j] * z^(j - 1)
        end
    y[i] = liczniki[i]/mianowniki[i]
    end
    return (sum(angle.(y)))/f_len
end
#działa

function rozwiazanie14(;
    a::Float64 = 0.0056,
    b::Float64 = 1.0,
    x::Vector{Float64} = [0.56847, 0.74211, 0.37596, 0.9346, 0.08945, 0.00563, 0.57125, 0.75471, 0.16204, 0.38112, 0.95479, 0.6514, 0.55112, 0.35259, 0.69607, 0.16842, 0.96484, 0.28371, 0.67609, 0.06089, 0.15291, 0.47616, 0.88706, 0.02472, 0.71574, 0.99689, 0.13549, 0.45939, 0.72669, 0.12584, 0.68082, 0.49304, 0.39996, 0.70337, 0.54443, 0.80433, 0.69674, 0.86164, 0.72668, 0.80791, 0.12616, 0.75179, 0.57159, 0.11995, 0.71875, 0.27166, 0.04843, 0.46238, 0.68282, 0.3623, 0.66588, 0.80024, 0.97114, 0.9802, 0.77712, 0.82037, 0.50873, 0.96565, 0.96343, 0.95378, 0.4523, 0.81601, 0.53997, 0.07107, 0.15579, 0.96985, 0.98929, 0.21106, 0.0927, 0.89756, 0.77855, 0.91343, 0.30874, 0.52587, 0.08481, 0.11552, 0.7191],
)
    N = 6
    L = range(start = a, stop = b, length = 2^N)
    xq = zeros(length(x))
    function quantize(x, L)
        return L[argmin(abs.(L .- x))]
    end

    for i in eachindex(xq)
        xq[i] = quantize(x[i], L)
    end
    err = abs.(xq .- x)
    return sum(err.^2)
end
#działa

function rozwiazanie15(;
    order::Int = 90,
    fp::Float64 = 192.0,
    f0::Float64 = 53.76,
    z::Vector{Int} = [44, 16, 2, 61],
)
    fn = f0/fp
    kronecker(n) = ifelse(n == 0, 1, 0)
    M = div(order,2)
    h = [kronecker(n) - 2*fn*sinc(2*n*fn) for n in -M:M]
    w = [1 - abs(n)/(M + 1) for n in -M:M]
    hw = h.*w
    out = [hw[i] for i in z]
    return sum(out)
end
#działa

function rozwiazanie16(;
    fp::Int = 940,
    x::Vector{ComplexF64} = ComplexF64[-0.65 - 0.67im, -0.29 - 1.34im, -1.28 + 0.2im, -0.44 + 0.15im, 1.0 + 0.05im, -0.66 - 0.1im, 0.08 + 0.24im, -1.17 + 0.43im, 0.05 + 0.85im, -0.5 - 0.46im, -0.24 + 0.16im, 0.76 - 0.29im, 0.35 + 0.09im, -1.85 + 1.1im, -0.51 - 0.12im, -0.29 + 1.02im, -0.31 + 1.76im, -0.55 - 0.15im, 0.1 - 0.7im, -0.0 + 0.52im, 1.2 - 1.01im, 0.45 + 0.71im, 1.73 + 0.9im, -0.54 + 1.56im, -0.22 + 0.4im, -0.16 - 0.44im, -0.78 + 0.24im, 0.52 + 1.06im, -0.8 - 0.85im, -0.2 - 1.5im, 0.81 - 0.95im, 0.91 + 0.35im, -0.18 - 0.57im, -0.66 + 0.81im, 1.14 + 0.02im, -0.65 + 1.58im, 0.06 - 0.47im, -0.46 + 0.35im, -0.48 - 0.18im, 0.5 - 0.68im, 0.02 - 1.54im, -1.47 - 1.26im, -0.37 - 1.14im, 0.08 - 0.32im, -1.19 - 1.9im, -0.04 - 0.37im, -1.39 - 1.23im],
    f::Vector{Int} = [-380, -360, -260, -60, -20, 180, 360],
)
    #w jądrze k/N = fn
    f_len = length(f)
    N = length(x)
    fn = [f[i]/fp for i in 1:f_len]

    X_f = 1/N .* [sum(x[n + 1] * exp(-im * 2 * pi * n * fi) for n in 0:N-1) for fi in fn]

    return sum(abs.(X_f))
end

function rozwiazanie17(;
    x::Vector{Float64} = [3.95, -3.92, 0.72, 2.89, -4.49, 4.25, -2.76, 2.85, 2.62, 1.96, -1.96, -2.94, 4.22, 3.53, 1.58, 4.46, -2.89, 3.41, 2.82, 0.46, -3.47, 4.93, 3.99, 3.49, -2.89, 2.29, 4.35, 4.84, -3.91, -4.37, -1.2, -1.27, 2.38, 3.48, 2.72, 2.37, 2.19, -3.66, -4.74, -3.1, -2.14, -4.18, 1.63, -4.46, -1.81, -2.09, 3.93, -3.82, 4.81, -3.06, 3.29, -1.63, 3.77, -4.55, -4.16, -0.5, 3.91, -2.53, 2.03, -2.88, 3.77, -3.25],
    h::Vector{Float64} = [1.46, -4.11, 0.82, -2.47, 0.76, 0.86, 2.3, 3.16, -0.75, -2.04],
)
    x_len = length(x)
    h_len = length(h)
    y_len = x_len + h_len - 1
    y = zeros(y_len)

    for i in 1:x_len
        for j in 1:h_len
            y[i + j - 1] += x[i] * h[j]
        end
    end
    power = sum(y.^2)/y_len
    return power
end
#działa

function rozwiazanie18(;
    zz::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    pp::Vector{ComplexF64} = ComplexF64[0.543701277994591 - 0.8319925555042785im, 0.29457887606763117 + 0.9483370303390719im, 0.543701277994591 + 0.8319925555042785im, 0.29457887606763117 - 0.9483370303390719im, 0.508848478970115 - 0.8409843938995955im, 0.3274254690915373 + 0.9249844307416222im, 0.508848478970115 + 0.8409843938995955im, 0.3274254690915373 - 0.9249844307416222im, 0.45219457592657175 - 0.864724019694428im, 0.3858890222126597 + 0.8953357230268396im, 0.45219457592657175 + 0.864724019694428im, 0.3858890222126597 - 0.8953357230268396im],
    k::Float64 = 2.9839279959995376e-7,
    F::Vector{Float64} = [0.13, 0.22, 0.43, 0.48],
)
    z_len = length(zz)
    p_len = length(pp)
    f_len = length(F)

    liczniki = ones(ComplexF64, f_len)
    mianowniki = ones(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for j in 1:z_len
            liczniki[i] *= (1 - zz[j] * z^(-1))
        end
        for j in 1:p_len
            mianowniki[i] *= (1 - pp[j] * z^(-1))
        end
        y[i] = liczniki[i]/mianowniki[i]
    end
    return sum(angle.(y))/f_len
end
#działa

function rozwiazanie19(;
    fp::Float64 = 435.66,
    t1::Float64 = -4.54,
    N::Int = 905,
)
    function g(t)
        return  2 * (mod((t + 0.5), 1)) - 1 
    end
    #t = 0:0.01:2
    #scatter(t, g.(t))
    t = range(start = t1, step = (1/fp), length = N)
    y = 5.1 .* (g.(1.2 .* t .- 3.3))
    return sum(y)/length(y)
end
#nie działa

function rozwiazanie20(;
    a::Float64 = -0.47,
    b::Float64 = 3.6,
    x::Vector{Float64} = [0.07439, 0.31386, 0.55985, 0.80738, 1.05542, 1.30362, 1.55183, 1.79999, 2.04803, 2.29588, 2.54343, 2.79043, 3.03628, 3.27912, 3.50973, 0.90213, 0.08447, 0.31533, 0.55913, 0.80638, 1.0552, 1.30498, 1.55547, 1.80659, 2.0583, 2.31064, 2.56375, 2.81792, 3.07393, 3.33425, 3.61268, -0.46529, 0.03272, 0.30346, 0.56309, 0.81973, 1.07515, 1.32993, 1.58434, 1.83849, 2.09245, 2.34627, 2.6, 2.85376, 3.1078, 3.36293, 3.62313, -0.27429, 0.09615, 0.35446, 0.6079, 0.8598, 1.11089, 1.36138, 1.61137, 1.86088, 2.1099, 2.35834, 2.60603, 2.85257, 3.0969, 3.33553, 3.54637, 0.05667, 0.15193, 0.38304, 0.62524, 0.87078, 1.11784, 1.36579, 1.61435, 1.86341, 2.11293, 2.36288],
)
    L = range(start = a, stop = b, length = 2^9)
    function quantize(x,L)
        return L[argmin(abs.(L .- x))]
    end
    xq = [quantize(x[i],L) for i in eachindex(x)]
    err = xq .- x
    return sum(err.^2)
end
#działa

function rozwiazanie21(;
    z::Vector{ComplexF64} = ComplexF64[0.9539973718119229 + 0.2998149672313643im, 0.9539973718119229 - 0.2998149672313643im, 0.9539973718119229 + 0.2998149672313643im, 0.9539973718119229 - 0.2998149672313643im, 0.9539973718119229 + 0.2998149672313643im, 0.9539973718119229 - 0.2998149672313643im, 0.9539973718119229 + 0.2998149672313643im, 0.9539973718119229 - 0.2998149672313643im, 0.9539973718119229 + 0.2998149672313643im, 0.9539973718119229 - 0.2998149672313643im],
    p::Vector{ComplexF64} = ComplexF64[0.8987996278010154 - 0.3664772948022497im, 0.9540008658998012 + 0.23108828496364262im, 0.8987996278010154 + 0.3664772948022497im, 0.9540008658998012 - 0.23108828496364262im, 0.873773799320539 - 0.3170080512428534im, 0.9166225536322109 + 0.23914261973127895im, 0.873773799320539 + 0.3170080512428534im, 0.9166225536322109 - 0.23914261973127895im, 0.8843940505296977 - 0.2681936778731765im, 2.870897034801335 + 0.870603362943713im],
    k::Float64 = 0.7753165952469468,
)
    p_abs = abs.(p)
    if any(p_abs .> 1)
        return -1.0
    else
        return 1.0
    end
end
#działa

function rozwiazanie22(;
    b::Vector{Float64} = [0.004750523610980866, 0.0, -0.014251570832942598, 0.0, 0.014251570832942598, 0.0, -0.004750523610980866],
    a::Vector{Float64} = [1.0, -3.406875307433302, 6.147978467588013, -6.69578478143845, 4.774734284099765, -2.051449306641576, 0.46831211117171234],
    x::Vector{Float64} = [0.42, -0.81, -0.64, -0.78, -0.69, -0.73, -0.12, -0.06, 0.03, 0.6, 0.97, -0.43, -0.28, -0.49, -0.01, 0.93, -0.82, 0.24, 0.47, 0.17, 0.73, -0.47, 0.48, -0.37, -0.11, 0.64, 0.76, -0.3, -0.28, 0.96, 0.58, -0.75, 0.5, -0.71, -0.28, 0.32, -0.82, -0.66, 0.27, 0.59, -0.75, -0.53, 0.5, -0.5],
    L::Int = 84,
)
    b_len = length(b)
    a_len = length(a)
    N = length(x)
    y = zeros(L)

    for i in 1:L
        for k in 1:b_len
            if i - k + 1 > 0 && i - k + 1 <= N
                y[i] += b[k] * x[i - k + 1]
            end
        end
        for k in 2:a_len
            if i - k + 1 > 0
                y[i] -= a[k] * y[i - k + 1]
            end
        end
    end
    return sqrt(sum(y.^2)/L)
end
#działa

function rozwiazanie23(;
    b::Vector{Float64} = [0.07176120384378183, 0.2152836115313455, 0.2152836115313455, 0.07176120384378183],
    a::Vector{Float64} = [1.0, -0.868220544221195, 0.5344046670707187, -0.09209449209926916],
    F::Vector{Float64} = [0.03, 0.03, 0.06, 0.08, 0.16, 0.5],
)
    b_len = length(b)
    a_len = length(a)
    f_len = length(F)
    liczniki = zeros(ComplexF64, f_len)
    mianowniki = zeros(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for k in 1:b_len
            liczniki[i] += b[k] * z ^(-k + 1)
        end
        for k in 1:a_len
            mianowniki[i] += a[k] * z^(-k + 1)
        end
        y[i] = liczniki[i]/mianowniki[i]
    end
    return sum(abs.(y))/length(y)
end
#działa

function rozwiazanie24(;
    order::Int = 36,
    fp::Float64 = 194.0,
    f0::Float64 = 73.72,
    z::Vector{Int} = [15, 2, 15, 34],
)
    M = div(order, 2)
    fn = f0/fp
    h = [2 * fn * sinc(2*fn*n) for n in -M:M]
    w = [1 - abs(n)/(M+1) for n in -M:M]
    hw = h .* w
    out = sum(hw[i] for i in z)
    return out
end
#działa

function rozwiazanie25(;
    a::Float64 = -0.5,
    b::Float64 = 0.59,
    x::Vector{Float64} = [-0.5, -0.484, -0.468, -0.452, -0.436, -0.42, -0.404, -0.388, -0.372, -0.356, -0.34, -0.324, -0.308, -0.292, -0.276, -0.26, -0.244, -0.228, -0.212, -0.196, -0.18, -0.164, -0.148, -0.132, -0.116, -0.1, -0.084, -0.068, -0.052, -0.036, -0.02, -0.004, 0.012, 0.028, 0.044, 0.06, 0.076, 0.092, 0.108, 0.124, 0.14, 0.156, 0.172, 0.188, 0.204, 0.22, 0.236, 0.252, 0.268, 0.284, 0.3, 0.316, 0.332, 0.348, 0.364, 0.38, 0.396, 0.412, 0.428, 0.444, 0.46, 0.476, 0.492, 0.508, 0.524, 0.54, 0.556, 0.572, 0.588],
)
    L = range(start = a, stop = b, length = 2^10)
    function quantize(x, L)
        return L[argmin(abs.(L .- x))]
    end
    xq = [quantize(x[i],L) for i in eachindex(x)]
    err = xq .- x
    return sum(err.^2)
end
#działa

function rozwiazanie26(;
    fp::Float64 = 471.46,
    t1::Float64 = 0.28,
    N::Int = 922,
)
    g(t) = ifelse(mod(t,1) < 0.5, 1, -1)
    t = range(start = t1, step = 1/fp, length = N)
    y = 3.0 .* g.(2.5 .* t .- 1.0)
    return sum(y)/length(y)
    #t = 0:0.01:2
    #scatter(t, g.(t))
end
#działa UŻYWAĆ MOD() ZAMIAST %

function rozwiazanie27(;
    m::Vector{Float64} = [1.4, 1.4015, 1.403, 1.4045, 1.406, 1.4075, 1.409, 1.4105, 1.412, 1.4135, 1.415, 1.4165, 1.418, 1.4195, 1.421, 1.4225, 1.424, 1.4255, 1.427, 1.4285, 1.43, 1.4315, 1.433, 1.4345, 1.436, 1.4375, 1.439, 1.4405, 1.442, 1.4435, 1.445, 1.4465, 1.448, 1.4495, 1.451, 1.4525, 1.454, 1.4555, 1.457, 1.4585, 1.46, 1.4615, 1.463, 1.4645, 1.466, 1.4675, 1.469, 1.4705, 1.472, 1.4735, 1.475, 1.4765, 1.478, 1.4795, 1.481, 1.4825, 1.484, 1.4855, 1.487, 1.4885, 1.49, 1.4915, 1.493, 1.4945, 1.496, 1.4975, 1.499, 1.5005, 1.502],
    s::Vector{Float64} = [0.5202, 0.3373, 0.8275, 0.0298, 0.8179, 0.5869, 0.6259, 0.5227, 0.1162, 0.9134, 0.7193, 0.7006, 0.2465, 0.5893, 0.3217, 0.2876, 0.6663, 0.2768, 0.0135, 0.8999, 0.1787, 0.624, 0.3145, 0.6367, 0.7585, 0.3625, 0.5133, 0.1979, 0.6902, 0.8774, 0.83, 0.1309, 0.6018, 0.1026, 0.3654, 0.168, 0.5965, 0.5036, 0.6541, 0.071, 0.0782, 0.5132, 0.3815, 0.4298, 0.0527, 0.3597, 0.2523, 0.0137, 0.2581, 0.6905, 0.9415, 0.5681, 0.959, 0.2989, 0.5027, 0.1299, 0.9231, 0.5696, 0.708, 0.254, 0.045, 0.8077, 0.6493, 0.1326, 0.9042, 0.1554, 0.1313, 0.5104, 0.3504],
    t::Vector{Float64} = [1.4849, 1.50185, 1.41875, 1.50035, 1.4342, 1.47935, 1.487],
)
    delta_t = m[2] - m[1]
    X = [sum(s[n] * sinc((ti - m[n])/delta_t) for n in eachindex(m)) for ti in t]
    return sum(X)
end
#działa

function rozwiazanie28(;
    b::Vector{Float64} = [0.3404644695102671, -1.7742358228632111, 4.792737196483271, -8.238489526317494, 9.823010366581457, -8.238489526317494, 4.792737196483272, -1.7742358228632116, 0.34046446951026704],
    a::Vector{Float64} = [1.0, -4.156464533920046, 8.948378852170244, -12.654898388278877, 12.84149324121643, -9.528773067880477, 5.18236246940519, -1.9465649693480502, 0.40481653589486194],
    x::Vector{Float64} = [-0.88, -0.9, -0.53, 0.75, -0.4, -0.93, -0.47, -0.69, -0.15, -0.23, -0.09, 0.52, -0.31, 0.23, -0.13, -0.98, 0.61, -0.61, 0.25, 0.51, -0.46, -0.52, 0.25, -0.42, 0.94, -0.87, 0.52, -0.04, -0.45, -0.31, -0.44, 0.83, -0.25, 0.69, -0.73, -0.56, 0.5, -0.69, 0.02, 0.43],
    L::Int = 60,
)
    a_len = length(a)
    b_len = length(b)
    N = length(x)
    y = zeros(L)

    for i in 1:L
        for k in 1:b_len
            if i - k + 1 > 0 && i - k + 1 <= N
                y[i] += b[k] * x[i - k + 1]
            end
        end
    for k in 2:a_len
            if i - k + 1 > 0
                y[i] -= a[k] * y[i - k + 1]
            end
        end
    end
    return sum(y.^2)
end
#działa

function rozwiazanie29(;
    x::Vector{Float64} = [-0.05, -2.17, -4.42, -1.74, -2.75, 4.51, -2.08, 0.2, -1.29, 1.49, 0.58, 1.7, 1.0, -2.63, 2.55, 3.19, -0.43, 2.45, -1.91, 3.22, 4.8, -0.86, 0.18, -4.59, 4.67, 2.63, -3.47, 0.06, 1.69, -3.0, -3.53, 2.56, -2.33, 3.21, -4.38, -1.66, -3.22, 0.05, -1.69, -1.72, -4.72, 0.76, 0.29, 0.58, 0.9, -3.12, -1.69, 1.56, -3.93, 0.82, -3.0, 2.17, 3.84, 0.31, -2.65, -4.03, -1.69, -4.64, -0.11, 3.19, 0.82, -3.66],
    h::Vector{Float64} = [-1.73, 1.57, 3.54, 3.29, 0.23, -1.8, 2.2, 2.7, -1.91, -0.93, 0.75, -3.77, -4.41],
)
    N = length(x)
    K = length(h)
    y = zeros(N + K - 1)

    for i in 1:N
        for j in 1:K
            y[i + j - 1] += x[i] * h[j]
        end
    end
    return sum(y)/length(y)
end
#działa

function rozwiazanie30(;
    b::Vector{Float64} = [0.6859738865629319, -1.8918455231414388, 3.797093540493793, -4.316630759380277, 3.797093540493793, -1.8918455231414388, 0.6859738865629319],
    a::Vector{Float64} = [1.0, -2.427190671057335, 4.2511399554530325, -4.252984384225971, 3.2738135372798256, -1.4201467503798486, 0.44118136138059183],
    F::Vector{Float64} = [0.22, 0.24, 0.26, 0.29, 0.3, 0.36],
)
    a_len = length(a)
    b_len = length(b)
    f_len = length(F)
    liczniki = zeros(ComplexF64, f_len)
    mianowniki = zeros(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for k in 1:b_len
            liczniki[i] += b[k] * z^(-k + 1)
        end
        for k in 1:a_len
            mianowniki[i] += a[k] * z^(-k + 1)
        end
        y[i] = liczniki[i]/mianowniki[i]
    end
    return sum(angle.(y))/f_len
end
#działa

function rozwiazanie31(;
    fp::Int = 532,
    x::Vector{ComplexF64} = ComplexF64[1.03 - 1.32im, 0.14 - 0.13im, 1.21 - 0.47im, 0.67 - 1.0im, -0.87 + 0.74im, -0.24 - 0.13im, 0.74 - 1.92im, -0.26 + 0.37im, -0.45 + 0.25im, -0.89 - 1.13im, -0.78 + 0.77im, -0.46 - 0.61im, 0.24 - 0.26im, 0.59 - 0.06im, 0.14 - 0.44im, 0.67 + 2.19im, -0.26 + 0.09im, -0.5 + 0.15im, -0.08 - 0.47im, 0.99 + 0.89im, -0.5 - 0.24im, 0.5 - 0.21im, 0.76 - 0.42im, -0.38 + 0.27im, 0.01 + 0.4im, 0.73 + 0.73im, 0.09 - 0.48im, -1.27 + 0.1im],
    f::Vector{Int} = [-171, -114, 0, 57, 76, 209],
)
    fn = [f[i]/fp for i in eachindex(f)]
    N = length(x)

    X_all = 1/N .* [sum(x[n + 1] * exp(-im * 2 * π * k * n /N) for n in 0:N-1) for k in 0:N-1]

    X_spec = 1/N .* [sum(x[n + 1] * exp(-im * 2 * π * n * fi) for n in 0:N-1) for fi in fn]

    return sum(abs.(X_spec))
end
#działa

function rozwiazanie32(;
    b::Vector{Float64} = [0.6668547023844128, -1.720764471909391, 3.4806618241912046, -3.8658925116288825, 3.4806618241912037, -1.720764471909391, 0.6668547023844127],
    a::Vector{Float64} = [1.0, -2.2575274288819127, 3.948876910415752, -3.813445803637163, 2.951472093696976, -1.2364482229285918, 0.3946840490385092],
    F::Vector{Float64} = [0.14, 0.43, 0.48, 0.5],
)
    b_len = length(b)
    a_len = length(a)
    f_len = length(F)
    mianowniki = zeros(ComplexF64, f_len)
    liczniki = zeros(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for k in 1:b_len
            liczniki[i] += b[k] * z^(-k + 1)
        end
        for k in 1:b_len
            mianowniki[i] += a[k] * z^(-k + 1)
        end
        y[i] = liczniki[i]/mianowniki[i]
    end
    return sum(abs.(y))/f_len
end
#0.9475142159299259 dobrze

function rozwiazanie33(;
    zz::Vector{ComplexF64} = ComplexF64[0.5653138377631579 + 0.8248759087483948im, 0.5653138377631579 - 0.8248759087483948im, 0.9090424796534677 + 0.41670345593176317im, 0.9090424796534677 - 0.41670345593176317im],
    pp::Vector{ComplexF64} = ComplexF64[-0.27610745027671657 + 0.6519220973669482im, -0.27610745027671657 - 0.6519220973669482im, -0.1706544392027319 + 0.2080237764058478im, -0.1706544392027319 - 0.2080237764058478im],
    k::Float64 = 0.05804559733761661,
    F::Vector{Float64} = [0.01, 0.44, 0.46],
)
    z_len = length(zz)
    p_len = length(pp)
    f_len = length(F)
    mianowniki = ones(ComplexF64, f_len)
    liczniki = ones(ComplexF64, f_len)
    y = ones(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for k in 1:p_len
            mianowniki[i] *= (1 - pp[k] * z^(-1))
        end
        for k in 1:z_len
            liczniki[i] *= (1 - zz[k] * z^(-1))
        end
        y[i] = k*liczniki[i]/mianowniki[i]
    end
    return sum(abs.(y))/f_len
end
#0.6676898085110858 dobrze

function rozwiazanie34(;
    a::Float64 = -2.4,
    b::Float64 = 4.9,
    x::Vector{Float64} = [-1.84, -1.3681, -0.89621, -0.42431, 0.04758, 0.51948, 0.99137, 1.46327, 1.93516, 2.40706, 2.87895, 3.35085, 3.82275, 4.29464, 4.76654, 4.76157, 4.28967, 3.81778, 3.34588, 2.87399, 2.40209, 1.9302, 1.4583, 0.98641, 0.51451, 0.04261, -0.42928, -0.90118, -1.37307, -1.84497, -2.31686, -2.41124, -1.93935, -1.46745, -0.99556, -0.52366, -0.05176, 0.42013, 0.89203, 1.36392, 1.83582, 2.30771, 2.77961, 3.2515, 3.7234, 4.19529, 4.66719, 4.86092, 4.38902, 3.91712, 3.44523, 2.97333],
)
    L = range(start = a, stop = b, length = 2^5)
    function quantize(x, L)
        return L[argmin(abs.(L .- x))]
    end
    xq = [quantize(x[i],L) for i in eachindex(x)]
    err = x .- xq
    pwr = sum(err.^2)/length(err)
    return sqrt(pwr)
end
#0.07288866395547805 dobrze

function rozwiazanie35(;
    order::Int = 86,
    fp::Float64 = 192.0,
    f0::Float64 = 32.64,
    z::Vector{Int} = [26, 24, 82],
)
    M = div(order,2)
    fn = f0/fp
    h = [2 * fn * sinc(2 * fn * n) for n in -M:M]
    w = [0.42 + 0.5*cos((2 * π * n)/(2 * M + 1)) + 0.08*cos((4 * π * n)/(2 * M + 1)) for n in -M:M]
    hw = h .* w
    out = sum(hw[i] for i in z)
    return out
end
#0.006983941709695499 dobrze

function rozwiazanie36(;
    b::Vector{Float64} = [0.15220776723622292, -0.6306612471456423, 1.1561685097078895, -1.1561685097078895, 0.6306612471456425, -0.15220776723622292],
    a::Vector{Float64} = [1.0, -1.1397725742429585, 1.51371415095299, -0.3171939570028648, 0.16876931161974204, 0.2613749456390448],
    x::Vector{Float64} = [-0.12, -0.57, -0.18, -0.44, -0.71, -0.46, -0.38, 0.9, 0.43, 0.28, -0.41, 0.73, -0.7, -0.24, -0.63, -0.06, -0.85, 0.07, 0.76, -0.37, 0.99, 0.21, 0.26, -0.16, -0.01, -0.66, 0.48],
    L::Int = 54,
)
    b_len = length(b)
    a_len = length(a)
    N = length(x)
    y = zeros(L)

    for i in 1:L
        for j in 1:b_len
            if i - j + 1 > 0 && i - j + 1 <= N
                y[i] += b[j] * x[i - j + 1]
            end
        end
        for j in 2:a_len
            if i - j + 1 > 0
                y[i] -= a[j] * y[i - j + 1]
            end
        end
    end
    return sum(y.^2)
end
#3.3525141321526473 dobrze

function rozwiazanie37(;
    fp::Int = 893,
    x::Vector{ComplexF64} = ComplexF64[-0.05 + 0.15im, -0.51 - 0.06im, 0.46 + 0.01im, 0.9 + 0.31im, -0.56 + 0.38im, 0.87 + 0.61im, 0.53 + 0.4im, -1.63 + 1.23im, 0.31 + 0.77im, 1.43 + 0.06im, 0.43 + 0.66im, -1.15 + 0.41im, -0.47 - 0.39im, -1.86 - 0.44im, 1.38 - 0.15im, 0.18 + 0.08im, 0.1 - 1.8im, -0.9 - 0.57im, -0.04 + 1.66im, -0.97 + 1.17im, -0.51 - 1.03im, 0.15 - 0.8im, -0.09 - 0.5im, -0.9 + 1.25im, -0.2 + 1.12im, -0.24 + 1.15im, 1.38 + 0.03im, 0.53 - 0.76im, 0.46 + 0.58im, 0.59 + 0.89im, -1.09 + 0.51im, 0.08 + 0.89im, -0.39 - 0.49im, 0.53 + 0.71im, -0.59 - 0.26im, -0.42 - 0.3im, 0.14 - 0.52im, 0.85 - 0.05im, -0.21 - 0.58im, -0.1 + 0.32im, 0.13 - 1.0im, 1.26 + 0.05im, 0.01 + 0.26im, -0.2 - 1.52im, -1.42 + 0.38im, -0.21 - 1.1im, 0.35 - 0.54im],
    f::Vector{Int} = [133, 171, 323, 418],
)
    N = length(x)
    f_len = length(f)
    fn = [f[i]/fp for i in 1:f_len]

    X_all = [sum(x[n + 1] * exp(-im * 2 * π * k * n / N) for n in 0:N-1) for k in 0:N-1]
    X_spec = [sum(x[n + 1] * exp(-im * 2 * π * fi * n) for n in 0:N-1) for fi in fn]

    return sum(angle.(X_spec))

end
#-4.361081197373714 dobrze

function rozwiazanie38(;
    m::Vector{Float64} = [2.8, 2.8019, 2.8038, 2.8057, 2.8076, 2.8095, 2.8114, 2.8133, 2.8152, 2.8171, 2.819, 2.8209, 2.8228, 2.8247, 2.8266, 2.8285, 2.8304, 2.8323, 2.8342, 2.8361, 2.838, 2.8399, 2.8418, 2.8437, 2.8456, 2.8475, 2.8494, 2.8513, 2.8532, 2.8551, 2.857, 2.8589, 2.8608, 2.8627, 2.8646, 2.8665, 2.8684, 2.8703, 2.8722, 2.8741, 2.876, 2.8779, 2.8798, 2.8817, 2.8836, 2.8855, 2.8874, 2.8893, 2.8912, 2.8931, 2.895, 2.8969, 2.8988, 2.9007, 2.9026, 2.9045, 2.9064, 2.9083, 2.9102, 2.9121, 2.914],
    s::Vector{Float64} = [0.0025, 0.0588, 0.8666, 0.7365, 0.1205, 0.3544, 0.7307, 0.4551, 0.0726, 0.4234, 0.1429, 0.4319, 0.8926, 0.447, 0.9485, 0.1193, 0.5426, 0.824, 0.7288, 0.5842, 0.351, 0.5389, 0.0885, 0.5073, 0.4411, 0.2934, 0.5071, 0.5116, 0.0003, 0.9083, 0.7886, 0.3045, 0.8251, 0.8614, 0.617, 0.6531, 0.7969, 0.1681, 0.2543, 0.6885, 0.927, 0.451, 0.7601, 0.9688, 0.8076, 0.2111, 0.6989, 0.7451, 0.489, 0.0804, 0.1332, 0.4731, 0.2665, 0.6928, 0.5649, 0.9544, 0.3258, 0.4117, 0.3996, 0.7947, 0.0048],
    t::Vector{Float64} = [2.8133, 2.86023, 2.88664, 2.89443, 2.84085, 2.84807],
)
    delta_t = m[2] - m[1]

    x = [sum(s[i] * sinc((ti - m[i])/delta_t) for i in eachindex(s)) for ti in t]
    return sum(x)
end
#2.010477765167538 dobrze

function rozwiazanie39(;
    x::Vector{Float64} = [-3.7, -3.08, -0.03, -4.52, 1.96, -2.09, -0.57, 4.51, -2.29, -3.16, -0.33, 0.09, 4.28, -1.48, -2.41, 0.25, -4.49, -4.92, -2.37, -3.47, 4.74, 1.43, -2.83, 1.64, -3.8, -4.85, 0.3, -4.99, -3.69, -1.57, -0.28, -2.36, -4.77, 0.97, -0.35, -0.26, 0.61, -3.76, -3.19, 4.72, -2.3, 0.0, 1.58, -0.13, 2.75, -4.13, -3.22, -3.15, 2.5, -0.71, 3.49, -2.69, -2.04, -2.29, -2.43, 3.01, 2.17, 2.21, -4.16, -1.48, -0.69, -3.52, -3.6],
    h::Vector{Float64} = [-0.64, 4.88, -0.42, -1.42, 0.06, -3.67, -3.69, -2.31, 4.06, -1.02, -2.1],
)
    N = length(x)
    K = length(h)
    y = zeros(N + K - 1)

    for i in 1:N
        for j in 1:K
            y[i + j - 1] += x[i] * h[j]
        end
    end
    return sum(y)/length(y)
end
#5.9212849315068485 dobrze

function rozwiazanie40(;
    fp::Float64 = 471.46,
    t1::Float64 = 0.28,
    N::Int = 922,
)
    g(t) = ifelse(mod(t,1) < 0.5, 1, -1)
    t = range(start = t1, length = N, step = 1/fp)
    y = 3.0 .* g.(2.5 .* t .- 1.0)
    return sum(y)/length(y)
end
#0.07158351409978309 dobrze

function rozwiazanie41(;
    z::Vector{ComplexF64} = ComplexF64[-1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.26243533330430674 + 0.693265210762646im, 0.26243533330430674 - 0.693265210762646im, 1.5669479036478788 + 2.5582560988402854im, 0.19233484328103675 - 0.3140128556269943im, 0.17452793889436508 + 0.0im],
    k::Float64 = 0.019847795197400566,
)
    p_abs = abs.(p)

    if any(p_abs .> 1)
        return -1.0
    else
        return 1.0
    end
end
#-1.0 dobrze

function rozwiazanie42(;
    b::Vector{Float64} = [0.0036995705131426322, -0.006588701086142232, 0.005123154642098176, -2.0536741824576278e-19, -0.005123154642098175, 0.006588701086142232, -0.003699570513142633],
    a::Vector{Float64} = [1.0, -2.978210743260216, 5.773741495194624, -6.608511452910479, 5.494231273099657, -2.69585928272244, 0.8614467267882088],
    F::Vector{Float64} = [0.22, 0.23, 0.24, 0.31, 0.32, 0.36],
)
    a_len = length(a)
    b_len = length(b)
    f_len = length(F)
    mi = zeros(ComplexF64, f_len)
    li = zeros(ComplexF64, f_len)
    y = zeros(ComplexF64, f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for j in 1:b_len
            li[i] += b[j] * z^(-j + 1)
        end
        for j in 1:a_len
            mi[i] += a[j] * z^(-j + 1)
        end
        y[i] = li[i]/mi[i]
    end
    return sum(abs.(y))/f_len
end
#0.002486328200146685 dobrze

function rozwiazanie42(;
    zz::Vector{ComplexF64} = ComplexF64[0.5653138377631579 + 0.8248759087483948im, 0.5653138377631579 - 0.8248759087483948im, 0.9090424796534677 + 0.41670345593176317im, 0.9090424796534677 - 0.41670345593176317im],
    pp::Vector{ComplexF64} = ComplexF64[-0.27610745027671657 + 0.6519220973669482im, -0.27610745027671657 - 0.6519220973669482im, -0.1706544392027319 + 0.2080237764058478im, -0.1706544392027319 - 0.2080237764058478im],
    k::Float64 = 0.05804559733761661,
    F::Vector{Float64} = [0.01, 0.44, 0.46],
)
    z_len = length(zz)
    p_len = length(pp)
    f_len = length(F)
    mian = ones(ComplexF64, f_len)
    licz = ones(ComplexF64,f_len)
    y = ones(ComplexF64,f_len)

    for i in 1:f_len
        z = exp(im * 2 * π * F[i])
        for j in 1:z_len
            licz[i] *= (1 - zz[j] * z ^(-1))
        end
        for j in 1:p_len
            mian[i] *= (1 - pp[j] * z ^(-1))
        end
        y[i] = k * licz[i]/mian[i]
    end
    return sum(abs.(y))/f_len
end

